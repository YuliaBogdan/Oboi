#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Oboi.App_Code
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Wallpapers")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPhotoe(Photoe instance);
    partial void UpdatePhotoe(Photoe instance);
    partial void DeletePhotoe(Photoe instance);
    partial void InsertSize(Size instance);
    partial void UpdateSize(Size instance);
    partial void DeleteSize(Size instance);
    partial void InsertMaterial(Material instance);
    partial void UpdateMaterial(Material instance);
    partial void DeleteMaterial(Material instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WallpapersConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Photoe> Photoes
		{
			get
			{
				return this.GetTable<Photoe>();
			}
		}
		
		public System.Data.Linq.Table<Size> Sizes
		{
			get
			{
				return this.GetTable<Size>();
			}
		}
		
		public System.Data.Linq.Table<Material> Materials
		{
			get
			{
				return this.GetTable<Material>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Photoes")]
	public partial class Photoe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Article;
		
		private System.Nullable<int> _ID_country;
		
		private System.Nullable<int> _ID_size;
		
		private System.Nullable<int> _ID_material;
		
		private System.Nullable<int> _BalanceSP;
		
		private System.Nullable<int> _BalanceTuran;
		
		private System.Nullable<decimal> _Cost;
		
		private EntityRef<Size> _Size;
		
		private EntityRef<Material> _Material;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArticleChanging(string value);
    partial void OnArticleChanged();
    partial void OnID_countryChanging(System.Nullable<int> value);
    partial void OnID_countryChanged();
    partial void OnID_sizeChanging(System.Nullable<int> value);
    partial void OnID_sizeChanged();
    partial void OnID_materialChanging(System.Nullable<int> value);
    partial void OnID_materialChanged();
    partial void OnBalanceSPChanging(System.Nullable<int> value);
    partial void OnBalanceSPChanged();
    partial void OnBalanceTuranChanging(System.Nullable<int> value);
    partial void OnBalanceTuranChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    #endregion
		
		public Photoe()
		{
			this._Size = default(EntityRef<Size>);
			this._Material = default(EntityRef<Material>);
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Article", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Article
		{
			get
			{
				return this._Article;
			}
			set
			{
				if ((this._Article != value))
				{
					this.OnArticleChanging(value);
					this.SendPropertyChanging();
					this._Article = value;
					this.SendPropertyChanged("Article");
					this.OnArticleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_country", DbType="Int")]
		public System.Nullable<int> ID_country
		{
			get
			{
				return this._ID_country;
			}
			set
			{
				if ((this._ID_country != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_countryChanging(value);
					this.SendPropertyChanging();
					this._ID_country = value;
					this.SendPropertyChanged("ID_country");
					this.OnID_countryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_size", DbType="Int")]
		public System.Nullable<int> ID_size
		{
			get
			{
				return this._ID_size;
			}
			set
			{
				if ((this._ID_size != value))
				{
					if (this._Size.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_sizeChanging(value);
					this.SendPropertyChanging();
					this._ID_size = value;
					this.SendPropertyChanged("ID_size");
					this.OnID_sizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_material", DbType="Int")]
		public System.Nullable<int> ID_material
		{
			get
			{
				return this._ID_material;
			}
			set
			{
				if ((this._ID_material != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_materialChanging(value);
					this.SendPropertyChanging();
					this._ID_material = value;
					this.SendPropertyChanged("ID_material");
					this.OnID_materialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceSP", DbType="Int")]
		public System.Nullable<int> BalanceSP
		{
			get
			{
				return this._BalanceSP;
			}
			set
			{
				if ((this._BalanceSP != value))
				{
					this.OnBalanceSPChanging(value);
					this.SendPropertyChanging();
					this._BalanceSP = value;
					this.SendPropertyChanged("BalanceSP");
					this.OnBalanceSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceTuran", DbType="Int")]
		public System.Nullable<int> BalanceTuran
		{
			get
			{
				return this._BalanceTuran;
			}
			set
			{
				if ((this._BalanceTuran != value))
				{
					this.OnBalanceTuranChanging(value);
					this.SendPropertyChanging();
					this._BalanceTuran = value;
					this.SendPropertyChanged("BalanceTuran");
					this.OnBalanceTuranChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Money")]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_Photoe", Storage="_Size", ThisKey="ID_size", OtherKey="ID_size", IsForeignKey=true)]
		public Size Size
		{
			get
			{
				return this._Size.Entity;
			}
			set
			{
				Size previousValue = this._Size.Entity;
				if (((previousValue != value) 
							|| (this._Size.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Size.Entity = null;
						previousValue.Photoes.Remove(this);
					}
					this._Size.Entity = value;
					if ((value != null))
					{
						value.Photoes.Add(this);
						this._ID_size = value.ID_size;
					}
					else
					{
						this._ID_size = default(Nullable<int>);
					}
					this.SendPropertyChanged("Size");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Photoe", Storage="_Material", ThisKey="ID_material", OtherKey="ID_material", IsForeignKey=true)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.Photoes.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.Photoes.Add(this);
						this._ID_material = value.ID_material;
					}
					else
					{
						this._ID_material = default(Nullable<int>);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Photoe", Storage="_Country", ThisKey="ID_country", OtherKey="ID_Country", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Photoes.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Photoes.Add(this);
						this._ID_country = value.ID_Country;
					}
					else
					{
						this._ID_country = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sizes")]
	public partial class Size : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_size;
		
		private string _Size1;
		
		private EntitySet<Photoe> _Photoes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_sizeChanging(int value);
    partial void OnID_sizeChanged();
    partial void OnSize1Changing(string value);
    partial void OnSize1Changed();
    #endregion
		
		public Size()
		{
			this._Photoes = new EntitySet<Photoe>(new Action<Photoe>(this.attach_Photoes), new Action<Photoe>(this.detach_Photoes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_size", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_size
		{
			get
			{
				return this._ID_size;
			}
			set
			{
				if ((this._ID_size != value))
				{
					this.OnID_sizeChanging(value);
					this.SendPropertyChanging();
					this._ID_size = value;
					this.SendPropertyChanged("ID_size");
					this.OnID_sizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Size", Storage="_Size1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Size1
		{
			get
			{
				return this._Size1;
			}
			set
			{
				if ((this._Size1 != value))
				{
					this.OnSize1Changing(value);
					this.SendPropertyChanging();
					this._Size1 = value;
					this.SendPropertyChanged("Size1");
					this.OnSize1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_Photoe", Storage="_Photoes", ThisKey="ID_size", OtherKey="ID_size")]
		public EntitySet<Photoe> Photoes
		{
			get
			{
				return this._Photoes;
			}
			set
			{
				this._Photoes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Photoes(Photoe entity)
		{
			this.SendPropertyChanging();
			entity.Size = this;
		}
		
		private void detach_Photoes(Photoe entity)
		{
			this.SendPropertyChanging();
			entity.Size = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Materials")]
	public partial class Material : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_material;
		
		private string _Material1;
		
		private EntitySet<Photoe> _Photoes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_materialChanging(int value);
    partial void OnID_materialChanged();
    partial void OnMaterial1Changing(string value);
    partial void OnMaterial1Changed();
    #endregion
		
		public Material()
		{
			this._Photoes = new EntitySet<Photoe>(new Action<Photoe>(this.attach_Photoes), new Action<Photoe>(this.detach_Photoes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_material", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_material
		{
			get
			{
				return this._ID_material;
			}
			set
			{
				if ((this._ID_material != value))
				{
					this.OnID_materialChanging(value);
					this.SendPropertyChanging();
					this._ID_material = value;
					this.SendPropertyChanged("ID_material");
					this.OnID_materialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Material", Storage="_Material1", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Material1
		{
			get
			{
				return this._Material1;
			}
			set
			{
				if ((this._Material1 != value))
				{
					this.OnMaterial1Changing(value);
					this.SendPropertyChanging();
					this._Material1 = value;
					this.SendPropertyChanged("Material1");
					this.OnMaterial1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Photoe", Storage="_Photoes", ThisKey="ID_material", OtherKey="ID_material")]
		public EntitySet<Photoe> Photoes
		{
			get
			{
				return this._Photoes;
			}
			set
			{
				this._Photoes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Photoes(Photoe entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_Photoes(Photoe entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Country;
		
		private string _Country1;
		
		private EntitySet<Photoe> _Photoes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_CountryChanging(int value);
    partial void OnID_CountryChanged();
    partial void OnCountry1Changing(string value);
    partial void OnCountry1Changed();
    #endregion
		
		public Country()
		{
			this._Photoes = new EntitySet<Photoe>(new Action<Photoe>(this.attach_Photoes), new Action<Photoe>(this.detach_Photoes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Country", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_Country
		{
			get
			{
				return this._ID_Country;
			}
			set
			{
				if ((this._ID_Country != value))
				{
					this.OnID_CountryChanging(value);
					this.SendPropertyChanging();
					this._ID_Country = value;
					this.SendPropertyChanged("ID_Country");
					this.OnID_CountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Country", Storage="_Country1", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Country1
		{
			get
			{
				return this._Country1;
			}
			set
			{
				if ((this._Country1 != value))
				{
					this.OnCountry1Changing(value);
					this.SendPropertyChanging();
					this._Country1 = value;
					this.SendPropertyChanged("Country1");
					this.OnCountry1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Photoe", Storage="_Photoes", ThisKey="ID_Country", OtherKey="ID_country")]
		public EntitySet<Photoe> Photoes
		{
			get
			{
				return this._Photoes;
			}
			set
			{
				this._Photoes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Photoes(Photoe entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Photoes(Photoe entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
}
#pragma warning restore 1591
